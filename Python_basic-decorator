#https://velog.io/@hwang-eunji/python-decorator-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0
# 데코레이터 이해하기
# 어떤 시스템이 유료계정을 사용하는 사용자에게만 서비스A를 제공한다고 하자
# 즉, 유료서비스는 실행 전 유료계정 여부를 체크함
# 이때, 유료서비스를 계속 만들면 유료계정 여부를 체크하는 코드가 중첩되어 사용됨
# 1. 유료계정 여부를 체크하는 함수 (is_paid_user)를 만들고,
# 2. 유료서비스 실행 전 is_paid_user를 데코레이터로 사용하자

is_paid_user(paid_service):
    '''
    사용자 id (user_id)가 유료계정 DB인 paid_user에 있는지 체크
    있으면, 유료서비스 실행
    '''
    def wrapper():
        if user_id in paid_user:
            paid_service()
        else:
            pass
    return wrapper
    
# **데코레이터를 사용하지 않는 경우
def paid_service1(user_id, ...):
    # 유료계정 여부를 체크하는 코드
    # 유료서비스1 관련 코드
    
def paid_service2(user_id, ...):
    # 유료계정 여부를 체크하는 코드
    # 유료서비스2 관련 코드

# **데코레이터를 사용하는 경우
@is_paid_user
def paid_service1(...):
    # 유료서비스1 관련 코드

# **데코레이터를 실행했을 때의 내부 과정
paid_service1 # 데코레이터를 갖는 함수 (유료서비스1) 실행
decorated_fun = is_paid_user(paid_service1)
decorated_fun()
# 즉, 데코레이터를 실행할 때 인자로 해당 함수를 전달
